else if(dunif(sample.x[i],0,2)*C*U > known.pdf(sample.x[i])) {
accept[i] = 'No'
}
}
T = data.frame(sample.x, accept = factor(accept, levels= c('Yes','No')))
ans<-hist(T[,1][T$accept=='Yes'], breaks = seq(0,2,0.01), freq = F, main = 'Histogram of X', xlab = 'X')
#Step2: Generate 100,000 samples from known function with uniform p.d.f.
#The more samples you generate, the more precise answer will be with smoother historam
sample.x = runif(10000,0,2)
accept = c()
#Step 3: Core of Acceptance-Rejection Sampling method
#Constant C = max(x/2)
C <- 1
for(i in 1:length(sample.x)){
U = runif(1, 0, 2)
if(dunif(sample.x[i], 0, 2)*C*U <= known.pdf(sample.x[i])) {
accept[i] = 'Yes'
}
else if(dunif(sample.x[i],0,2)*C*U > known.pdf(sample.x[i])) {
accept[i] = 'No'
}
}
T = data.frame(sample.x, accept = factor(accept, levels= c('Yes','No')))
ans<-hist(T[,1][T$accept=='Yes'], breaks = seq(0,2,0.01), freq = F, main = 'Histogram of X', xlab = 'X')
#Step2: Generate 100,000 samples from known function with uniform p.d.f.
#The more samples you generate, the more precise answer will be with smoother historam
sample.x = runif(1000,0,2)
accept = c()
#Step 3: Core of Acceptance-Rejection Sampling method
#Constant C = max(x/2)
C <- 1
for(i in 1:length(sample.x)){
U = runif(1, 0, 2)
if(dunif(sample.x[i], 0, 2)*C*U <= known.pdf(sample.x[i])) {
accept[i] = 'Yes'
}
else if(dunif(sample.x[i],0,2)*C*U > known.pdf(sample.x[i])) {
accept[i] = 'No'
}
}
T = data.frame(sample.x, accept = factor(accept, levels= c('Yes','No')))
ans<-hist(T[,1][T$accept=='Yes'], breaks = seq(0,2,0.01), freq = F, main = 'Histogram of X', xlab = 'X')
#Step2: Generate 100,000 samples from known function with uniform p.d.f.
#The more samples you generate, the more precise answer will be with smoother historam
sample.x = runif(1000,0,2)
accept = c()
#Step 3: Core of Acceptance-Rejection Sampling method
#Constant C = max(x/2)
C <- 1
for(i in 1:length(sample.x)){
U = runif(1, 0, 2)
#if(dunif(sample.x[i], 0, 2)*C*U <= known.pdf(sample.x[i])) {
if(sample.x[i]*C*U <= known.pdf(sample.x[i])) {
accept[i] = 'Yes'
}
#else if(dunif(sample.x[i],0,2)*C*U > known.pdf(sample.x[i])) {
else if(sample.x[i]*C*U > known.pdf(sample.x[i])) {
accept[i] = 'No'
}
}
T = data.frame(sample.x, accept = factor(accept, levels= c('Yes','No')))
ans<-hist(T[,1][T$accept=='Yes'], breaks = seq(0,2,0.01), freq = F, main = 'Histogram of X', xlab = 'X')
sample.x = runif(100000,0,2)
accept = c()
#Step 3: Core of Acceptance-Rejection Sampling method
#Constant C = max(x/2)
C <- 1
for(i in 1:length(sample.x)){
U = runif(1, 0, 2)
#if(dunif(sample.x[i], 0, 2)*C*U <= known.pdf(sample.x[i])) {
if(sample.x[i]*C*U <= known.pdf(sample.x[i])) {
accept[i] = 'Yes'
}
#else if(dunif(sample.x[i],0,2)*C*U > known.pdf(sample.x[i])) {
else if(sample.x[i]*C*U > known.pdf(sample.x[i])) {
accept[i] = 'No'
}
}
T = data.frame(sample.x, accept = factor(accept, levels= c('Yes','No')))
ans<-hist(T[,1][T$accept=='Yes'], breaks = seq(0,2,0.01), freq = F, main = 'Histogram of X', xlab = 'X')
sample.x = runif(100000,0,2)
accept = c()
#Step 3: Core of Acceptance-Rejection Sampling method
#Constant C = max(x/2)
C <- 1
for(i in 1:length(sample.x)){
U = runif(1, 0, 2)
if(dunif(sample.x[i], 0, 2)*C*U <= known.pdf(sample.x[i])) {
accept[i] = 'Yes'
}
else if(dunif(sample.x[i],0,2)*C*U > known.pdf(sample.x[i])) {
accept[i] = 'No'
}
}
T = data.frame(sample.x, accept = factor(accept, levels= c('Yes','No')))
ans<-hist(T[,1][T$accept=='Yes'], breaks = seq(0,2,0.01), freq = F, main = 'Histogram of X', xlab = 'X')
library(ape) # written by Emmanuel Paradis
library(phytools) # written by Liam Revell
library(geiger) # written by Luke Harmon
library(picante) # Steve Kembel et al.
library(adephylo)  # Thibaut Jombart
data(package="geiger",geospiza) #a small tree that is loaded as an example in geiger
geospiza
tree<-geospiza$geospiza.tree
tree
plot.new() # clear the plotting window
plot(tree,label.offset=0.15,cex=0.6)
microLabel <- character(length(geospiza$dat[,"tarsusL"])) # create an empty matrix the length of the tree
microLabel
names(microLabel) <- geospiza$dat[,"tarsusL"] # add the spceies names
tree$tip.label <- paste(tree$tip.label,"_", geospiza$dat[,"tarsusL"],sep='')
tree$tip.label
plot(tree)
# 2) Add a scale bar with label below
tarsusL <- geospiza$dat[,"tarsusL"]
names(tarsusL) <- rownames(geospiza)
tarsusL # snout vent length
# Add the SVL data
abline(v=40, col="gray") # add a grey separator
segments(35, 1:length(tarsusL), 35 + (tarsusL[tree$tip.label]/10), 1:length(tarsusL))
?abline
plot(c(-2,3), c(-1,5), type = "n", xlab="x", ylab="y", asp = 1)
## the x- and y-axis, and an integer grid
abline(h=0, v=0, col = "gray60")
text(1,0, "abline( h = 0 )", col = "gray60", adj = c(0, -.1))
abline(h = -1:5, v = -2:3, col = "lightgray", lty=3)
abline(a=1, b=2, col = 2)
text(1,3, "abline( 1, 2 )", col=2, adj=c(-.1,-.1))
abline(v=40, col="gray") # add a grey separator
abline(v=40, col="gray") # add a grey separator
plot.new() # clear the plotting window
plot(tree,label.offset=0.15,cex=0.6)
microLabel <- character(length(geospiza$dat[,"tarsusL"])) # create an empty matrix the length of the tree
microLabel
names(microLabel) <- geospiza$dat[,"tarsusL"] # add the spceies names
tree$tip.label <- paste(tree$tip.label,"_", geospiza$dat[,"tarsusL"],sep='')
tree$tip.label
plot(tree)
abline(v=40, col="gray") # add a grey separator
data(package="geiger",geospiza) #a small tree that is loaded as an example in geiger
geospiza
tree<-geospiza$geospiza.tree
tree
plot.new() # clear the plotting window
plot(tree,label.offset=0.15,cex=0.6)
microLabel <- character(length(geospiza$dat[,"tarsusL"])) # create an empty matrix the length of the tree
microLabel
names(microLabel) <- geospiza$dat[,"tarsusL"] # add the spceies names
tree$tip.label <- paste(tree$tip.label,"_", geospiza$dat[,"tarsusL"],sep='')
tree$tip.label
plot(tree)
# 2) Add a scale bar with label below
tarsusL <- geospiza$dat[,"tarsusL"]
names(tarsusL) <- rownames(geospiza)
tarsusL # snout vent length
# Add the SVL data
abline(v=40, col="gray") # add a grey separator
text(c(35, 35+(max(tarsusL)/10)), c(-3,-3), c("0","19 mm"), cex=0.5)
text(43, -6, "tarsusL", cex=0.5)
box(lty = 2)
text(2, 1.5, "This is a node", font = 2)
arrows(3.5, 1.55, 6.1, 2.2, length = 0.1, lwd = 2)
text(0.5, 3.125, "Root", srt = 270)
points(rep(18.5, 4), 1:4, pch = 15:18, cex = 1.5)
plot.new() # clear the plotting window
plot.phylo(tree, font = 1, no.margin = TRUE, plot= FALSE) #set the graphics as if the tree was plotted
rect(1.2, 0.5, 36, 5.4, col = "fusca")
par(new = TRUE) # now that the current graphical device has been freshly opened
plot(tree, font = 1, no.margin = TRUE)
rect(1.2, 0.5, 36, 5.4, col = "fusca 3.270543")
rect(1.2, 0.5, 36, 5.4, col = "fusca_3.270543")
rect(1.2, 0.5, 36, 5.4)
?rect
plot.new() # clear the plotting window
plot.phylo(tree, font = 1, no.margin = TRUE, plot= FALSE) #set the graphics as if the tree was plotted
rect(1.2, 0.5, 36, 5.4)
rect(1.2, 50, 86, 5.4)
rect(1.2, 50, 36, 54)
plot.new() # clear the plotting window
plot.phylo(tree, font = 1, no.margin = TRUE, plot= FALSE) #set the graphics as if the tree was plotted
rect(1.2, 50, 36, 54)
plot.new() # clear the plotting window
plot.phylo(tree, font = 1, no.margin = TRUE, plot= FALSE) #set the graphics as if the tree was plotted
rect(1.2, 50, 36, 5.4)
par(new = TRUE) # now that the current graphical device has been freshly opened
rect(12, 50, 36, 5.4)
par(new = TRUE) # now that the current graphical device has been freshly opened
plot.new() # clear the plotting window
plot.phylo(tree, font = 1, no.margin = TRUE, plot= FALSE) #set the graphics as if the tree was plotted
rect(12, 50, 36, 5.4)
par(new = TRUE) # now that the current graphical device has been freshly opened
plot.new() # clear the plotting window
plot.phylo(tree, font = 1, no.margin = TRUE, plot= FALSE) #set the graphics as if the tree was plotted
plot.new() # clear the plotting window
plot.phylo(tree, font = 1, no.margin = TRUE, plot= FALSE) #set the graphics as if the tree was plotted
rect(12, 50, 36, 5.4)
par(new = TRUE) # now that the current graphical device has been freshly opened
rect(0, 50, 36, 5.4)
rect(0, 50, 6, 5.4)
par(new = TRUE) # now that the current graphical device has been freshly opened
plot.new() # clear the plotting window
plot.phylo(tree, font = 1, no.margin = TRUE, plot= FALSE) #set the graphics as if the tree was plotted
plot.new() # clear the plotting window
plot.phylo(tree, font = 1, no.margin = TRUE, plot= FALSE) #set the graphics as if the tree was plotted
rect(0, 50, 6, 5.4)
par(new = TRUE) # now that the current graphical device has been freshly opened
?rect
plot.new() # clear the plotting window
plot.phylo(tree, font = 1, no.margin = TRUE, plot= FALSE) #set the graphics as if the tree was plotted
rect(0, 50, 6, 54)
par(new = TRUE) # now that the current graphical device has been freshly opened
rect(0, 1, 1, 2)
rect(0, 1, 1, 20)
rect(0, 1, 1, 5)
rect(0, 4, 1, 5)
plot.new() # clear the plotting window
plot.phylo(tree, font = 1, no.margin = TRUE, plot= FALSE) #set the graphics as if the tree was plotted
rect(0, 4, 1, 5)
data(package="geiger",geospiza)
geospiza
plot(geospiza, cex=.5)
data(bird.families)
bird.families
plot(bird.families, cex=.5)
plot(tree, cex=.5)
zoom(tree, 1:15, col = "grey", no.margin = TRUE, font = 1, subtree = TRUE) # zoom into tips 1:15
zoom(tree, 1:15, col = "grey", no.margin = TRUE, font = 1, subtree = F)
plot(tree, cex=.5)
data(package="geiger",geospiza) #a small tree that is loaded as an example in geiger
geospiza
tree<-geospiza$geospiza.tree
tree
plot.new() # clear the plotting window
plot(tree,label.offset=0.15,cex=0.6)
microLabel <- character(length(geospiza$dat[,"tarsusL"])) # create an empty matrix the length of the tree
microLabel
names(microLabel) <- geospiza$dat[,"tarsusL"] # add the spceies names
tree$tip.label <- paste(tree$tip.label,"_", geospiza$dat[,"tarsusL"],sep='')
tree$tip.label
plot(tree)
plot(tree, cex=.5)
zoom(tree, 1:15, col = "grey", no.margin = TRUE, font = 1, subtree = TRUE) # zoom into tips 1:15
zoom(tree, 1:5, col = "grey", no.margin = TRUE, font = 1, subtree = TRUE) # zoom into tips 1:15
zoom(tree, 1:2, col = "grey", no.margin = TRUE, font = 1, subtree = F)
plot(tree, cex=.5)
zoom(tree, 1:5, col = "grey", no.margin = TRUE, font = 1, subtree = TRUE) # zoom into tips 1:15
zoom(tree, 1:2, col = "grey", no.margin = TRUE, font = 1, subtree = F)
zoom(tree, 1:5, col = "grey", no.margin = TRUE, font = 1, subtree = F) # zoom into tips 1:15
for(q in seq(1,40)) {
print(10^(-q/10))
}
for(q in seq(1,40)) {
print(1-10^(-q/10))
}
for(q in seq(1,40)) {
print(round(1-10^(-q/10),4))
}
source("http://bioconductor.org/biocLite.R")
biocLite("Biostrings")
biocLite("IRanges")
biocLite("GenomicRanges")
biocLite("ShortRead")
biocLite("Biobase")
0.75*(1-exp(-0.75*0.67))
-0.75*ln(1-(4/3)*0.67))
-0.75*ln(1-(4/3)*0.67)
-0.75*log(1-(4/3)*0.67)
?ln
logarithm
?logarithm
-0.75*log(1-(4/3)*0.625)
0.75*(1-exp(-(4/3)*0.67))
-log(35568)
-log(35568.08)
-0.75*log(1-(4/3)*0.1)
-0.75*log(1-(4/3)*0.4)
-0.75*log(1-(4/3)*0.6)
-0.75*log(1-(4/3)*0.00558)
-0.75*log(1-(4/3)*0.00893)
-0.75*log(1-(4/3)*0.04023)
-0.75*log(1-(4/3)*0.05022)
-0.75*log(1-(4/3)*0.08147)
-0.75*log(1-(4/3)*0.09040)
-0.75*log(1-(4/3)*0.11725)
-0.75*log(1-(4/3)*0.12946)
-0.5*log(1-2*0.08147-0.00558)-0.25*log(1-2*0.00558)
-0.5*log(1-2*0.09040-0.00893)-0.25*log(1-2*0.00893)
-0.5*log(1-2*0.11725-0.04023)-0.25*log(1-2*0.04023)
-0.5*log(1-2*0.12946-0.05022)-0.25*log(1-2*0.05022)
-0.75*log(1-(4/3)*0.08705)
-0.75*log(1-(4/3)*0.09933)
-0.75*log(1-(4/3)*0.15748)
-0.75*log(1-(4/3)*0.17969)
package ‘ape’ is not available
install.packages("ape", dependencies = TRUE)
N<-10
h<-7
p <- 0.1
for(i in 1:4) {
p <- p + 0.2
P <- (fact(N)/(fact(h)*fact(N-h)))*(p^h)*(1-p)^(N-h)
print(P)
}
N<-10
h<-7
p <- 0.1
for(i in 1:4) {
p <- p + 0.2
P <- (factorial(N)/(factorial(h)*factorial(N-h)))*(p^h)*(1-p)^(N-h)
print(P)
}
#P(h|N,p)=N!h!(N−h)!ph(1−p)N−h
N<-10
h<-7
p <- 0.1
for(i in 1:4) {
p <- p + 0.2
P <- (factorial(N)/(factorial(h)*factorial(N-h)))*(p^h)*(1-p)^(N-h)
print(p)
print(P)
}
N<-10
h<-7
p <- 0.1
for(i in 1:4) {
P <- (factorial(N)/(factorial(h)*factorial(N-h)))*(p^h)*(1-p)^(N-h)
print(p)
print(P)
p <- p + 0.2
}
N<-10
h<-7
p <- 0.1
for(i in 1:5) {
P <- (factorial(N)/(factorial(h)*factorial(N-h)))*(p^h)*(1-p)^(N-h)
print(p)
print(P)
p <- p + 0.2
}
N<-10
h<-7
p <- 0.1
for(i in 1:5) {
P <- (factorial(N)/(factorial(h)*factorial(N-h)))*(p^h)*(1-p)^(N-h)
print(p)
print(P)
sum <- sum + P
p <- p + 0.2
}
print(sum)
N<-10
h<-7
p <- 0.1
sum <- 0
for(i in 1:5) {
P <- (factorial(N)/(factorial(h)*factorial(N-h)))*(p^h)*(1-p)^(N-h)
print(p)
print(P)
sum <- sum + P
p <- p + 0.2
}
print(sum)
N<-10
h<-7
p <- 0.1
sum <- 0
tab <- matrix(0,nrow=5,ncol=5)
for(i in 1:5) {
P <- (factorial(N)/(factorial(h)*factorial(N-h)))*(p^h)*(1-p)^(N-h)
tab[i,1] <- p
tab[i,3] <- P
p <- p + 0.2
}
tab
tab <- matrix(0,nrow=5,ncol=5)
tab[1,2] <- 0.05
tab[2,2] <- 0.2
tab[3,2] <- 0.5
tab[4,2] <- 0.2
tab[5,2] <- 0.05
for(i in 1:5) {
P <- (factorial(N)/(factorial(h)*factorial(N-h)))*(p^h)*(1-p)^(N-h)
tab[i,1] <- p
tab[i,3] <- P
tab[i,4] <- tab[i,2]*tab[i,3]
tab[i,5] <- tab[i,4]/sum(tab[,4])
p <- p + 0.2
}
tab
N<-10
h<-7
p <- 0.1
sum <- 0
tab <- matrix(0,nrow=5,ncol=5)
tab[1,2] <- 0.05
tab[2,2] <- 0.2
tab[3,2] <- 0.5
tab[4,2] <- 0.2
tab[5,2] <- 0.05
for(i in 1:5) {
P <- (factorial(N)/(factorial(h)*factorial(N-h)))*(p^h)*(1-p)^(N-h)
tab[i,1] <- p
tab[i,3] <- P
tab[i,4] <- tab[i,2]*tab[i,3]
tab[i,5] <- tab[i,4]/sum(tab[,4])
p <- p + 0.2
}
tab
sum(tab[,5])
max(tab[,5])
tab[1,5]*tab[2,5]
tab[2,5]*tab[3,5]*p[4,5]
tab[2,5]*tab[3,5]*tab[4,5]
#P(h|N,p)=N!h!(N−h)!ph(1−p)N−h
N<-10
h<-7
p <- 0.1
sum <- 0
tab <- matrix(0,nrow=5,ncol=5)
tab[1,2] <- 0.05
tab[2,2] <- 0.2
tab[3,2] <- 0.5
tab[4,2] <- 0.2
tab[5,2] <- 0.05
for(i in 1:5) {
P <- (factorial(N)/(factorial(h)*factorial(N-h)))*(p^h)*(1-p)^(N-h)
tab[i,1] <- p
tab[i,3] <- P
tab[i,4] <- tab[i,2]*tab[i,3]
tab[i,5] <- tab[i,4]/sum(tab[,4])
p <- p + 0.2
}
tab
sum(tab[,3])
sum(tab[,4])
#P(h|N,p)=N!h!(N−h)!ph(1−p)N−h
N<-10
h<-7
p <- 0.1
sum <- 0
tab <- matrix(0,nrow=5,ncol=5)
tab[1,2] <- 0.05
tab[2,2] <- 0.2
tab[3,2] <- 0.5
tab[4,2] <- 0.2
tab[5,2] <- 0.05
for(i in 1:5) {
P <- (factorial(N)/(factorial(h)*factorial(N-h)))*(p^h)*(1-p)^(N-h)
tab[i,1] <- p
tab[i,3] <- P
tab[i,4] <- tab[i,2]*tab[i,3]
p <- p + 0.2
}
sum(tab[,3])
for(i in 1:5) {
tab[i,5] <- tab[i,4]/sum(tab[,4])
}
tab
sub(tab[,5])
sum(tab[,5])
max(tab[,5])
tab[1,5]+tab[2,5]
tab[2,5]+tab[3,5]+tab[4,5]
at = matrix(rnorm(1000, 1), ncol=10)
dat2 = t(t(dat)*1:10)
b = boxplot(dat2)
plot(NA, xlim=c(1,12), ylim=range(dat2), xaxt='n', ylab="value")
for(i in 1:10){
boxplot(dat2[,i], at=i, add=T)
}
abline(v=10.5, col="red")
boxplot(rf(100, 3, 8), at = 11, add=T)
boxplot(rf(100, 1, 8), at = 12, add=T)
axis(side=1, at=1:10, labels=F)
text(1:10, par("usr")[3] - 1.5, srt=45, adj=1, labels=paste("n", 1:10, sep=""), xpd=T, cex=.8)
text(c(11,12), par("usr")[3] - 1.5, srt=45, adj=1, labels=c("Raw","Roche"), xpd=T, cex=.8)
par(new="T")
plot(y=sin(seq(0,7, .01)), x=seq(0,7, .01), type="l", axes=F, xlab="", ylab="", ylim=c(-2,2), xlim=c(1,12))
dat = matrix(rnorm(1000, 1), ncol=10)
dat2 = t(t(dat)*1:10)
b = boxplot(dat2)
plot(NA, xlim=c(1,12), ylim=range(dat2), xaxt='n', ylab="value")
for(i in 1:10){
boxplot(dat2[,i], at=i, add=T)
}
abline(v=10.5, col="red")
boxplot(rf(100, 3, 8), at = 11, add=T)
boxplot(rf(100, 1, 8), at = 12, add=T)
axis(side=1, at=1:10, labels=F)
text(1:10, par("usr")[3] - 1.5, srt=45, adj=1, labels=paste("n", 1:10, sep=""), xpd=T, cex=.8)
text(c(11,12), par("usr")[3] - 1.5, srt=45, adj=1, labels=c("Raw","Roche"), xpd=T, cex=.8)
par(new="T")
plot(y=sin(seq(0,7, .01)), x=seq(0,7, .01), type="l", axes=F, xlab="", ylab="", ylim=c(-2,2), xlim=c(1,12))
plot(y=sin(seq(0,7, .01)), x=seq(0,7, .01), type="l", axes=F, xlab="", ylab="", ylim=c(-2,2), xlim=c(1,12))
dat = matrix(rnorm(1000, 1), ncol=10)
dat2 = t(t(dat)*1:10)
b = boxplot(dat2)
plot(NA, xlim=c(1,12), ylim=range(dat2), xaxt='n', ylab="value")
for(i in 1:10){
boxplot(dat2[,i], at=i, add=T)
}
abline(v=10.5, col="red")
boxplot(rf(100, 3, 8), at = 11, add=T)
boxplot(rf(100, 1, 8), at = 12, add=T)
axis(side=1, at=1:10, labels=F)
text(1:10, par("usr")[3] - 1.5, srt=45, adj=1, labels=paste("n", 1:10, sep=""), xpd=T, cex=.8)
text(c(11,12), par("usr")[3] - 1.5, srt=45, adj=1, labels=c("Raw","Roche"), xpd=T, cex=.8)
par(new="T")
plot(y=sin(seq(0,7, .01)), x=seq(0,7, .01), type="l", axes=F, xlab="", ylab="", ylim=c(-2,2), xlim=c(1,12))
library(shiny)
setwd("~/Dropbox/DecisivatoR/www")
runApp(getwd(),launch.browser = getOption("shiny.launch.browser", interactive()))
