#for(j in seq(1, length(authors))) {
#  if( (grep( authors[i], ) != -1) && (i != j) ) {
#    trial.table[authors[i], authors[j]] = trial.table[authors[i], authors[j]] + 1
#  }
#}
}
for(i in seq(1, length(authors)) ) {
#for(k in seq(1, length(authors2)) ) {
#print(getNodeSet(authors2[[k]], "//Item[@Name='AuthorList']")[5])
print( xpathSApply(summaries, "//Item[@Name='AuthorList']")[[5]], xmlValue, sep="-")
#}
#print(authors2)
#for(j in seq(1, length(authors))) {
#  if( (grep( authors[i], ) != -1) && (i != j) ) {
#    trial.table[authors[i], authors[j]] = trial.table[authors[i], authors[j]] + 1
#  }
#}
}
for(i in seq(1, length(authors)) ) {
#for(k in seq(1, length(authors2)) ) {
#print(getNodeSet(authors2[[k]], "//Item[@Name='AuthorList']")[5])
print( xpathSApply(summaries, "//Item[@Name='AuthorList']", xmlValue, sep="-") )
#}
#print(authors2)
#for(j in seq(1, length(authors))) {
#  if( (grep( authors[i], ) != -1) && (i != j) ) {
#    trial.table[authors[i], authors[j]] = trial.table[authors[i], authors[j]] + 1
#  }
#}
}
authors2 <- newXMLDoc(getNodeSet(summaries, "//Item[@Name='AuthorList']"))
fix(authors)
fix(authors2)
for(i in seq(1, length(authors)) ) {
#for(k in seq(1, length(authors2)) ) {
#print(getNodeSet(authors2[[k]], "//Item[@Name='AuthorList']")[5])
print( xpathSApply(authors2, "//Item[@Name='AuthorList']", xmlValue, sep="-") )
#}
#print(authors2)
#for(j in seq(1, length(authors))) {
#  if( (grep( authors[i], ) != -1) && (i != j) ) {
#    trial.table[authors[i], authors[j]] = trial.table[authors[i], authors[j]] + 1
#  }
#}
}
for(i in seq(1, length(authors)) ) {
#for(k in seq(1, length(authors2)) ) {
#print(getNodeSet(authors2[[k]], "//Item[@Name='AuthorList']")[5])
print( xpathSApply(authors2, "//Item[@Name='AuthorList']", xmlValue, sep="-") )
#}
print(authors2)
#for(j in seq(1, length(authors))) {
#  if( (grep( authors[i], ) != -1) && (i != j) ) {
#    trial.table[authors[i], authors[j]] = trial.table[authors[i], authors[j]] + 1
#  }
#}
}
for(i in seq(1, length(authors)) ) {
#for(k in seq(1, length(authors2)) ) {
#print(getNodeSet(authors2[[k]], "//Item[@Name='AuthorList']")[5])
print( xpathSApply(authors2, "//Item[@Name='AuthorList']", xmlValue ) )
#}
#print(authors2)
#for(j in seq(1, length(authors))) {
#  if( (grep( authors[i], ) != -1) && (i != j) ) {
#    trial.table[authors[i], authors[j]] = trial.table[authors[i], authors[j]] + 1
#  }
#}
}
for(i in seq(1, length(authors)) ) {
#for(k in seq(1, length(authors2)) ) {
#print(getNodeSet(authors2[[k]], "//Item[@Name='AuthorList']")[5])
print( xpathSApply(authors2, "//Item[@Name='AuthorList']", xmlValue ) )
#}
#print(authors2)
#for(j in seq(1, length(authors))) {
#  if( (grep( authors[i], ) != -1) && (i != j) ) {
#    trial.table[authors[i], authors[j]] = trial.table[authors[i], authors[j]] + 1
#  }
#}
}
authors2 <- getNodeSet(summaries, "//Item[@Name='AuthorList']")
for(i in seq(1, length(authors)) ) {
#for(k in seq(1, length(authors2)) ) {
#print(getNodeSet(authors2[[k]], "//Item[@Name='AuthorList']")[5])
print( xpathSApply(authors2, "//Item[@Name='AuthorList']", xmlValue ) )
#}
#print(authors2)
#for(j in seq(1, length(authors))) {
#  if( (grep( authors[i], ) != -1) && (i != j) ) {
#    trial.table[authors[i], authors[j]] = trial.table[authors[i], authors[j]] + 1
#  }
#}
}
authors2 <- getNodeSet(summaries, "//Item[@Name='AuthorList']")
for(i in seq(1, length(authors)) ) {
#for(k in seq(1, length(authors2)) ) {
#print(getNodeSet(authors2[[k]], "//Item[@Name='AuthorList']")[5])
print( xpathSApply(authors2, "//Item[@Name='Author']", xmlValue ) )
#}
#print(authors2)
#for(j in seq(1, length(authors))) {
#  if( (grep( authors[i], ) != -1) && (i != j) ) {
#    trial.table[authors[i], authors[j]] = trial.table[authors[i], authors[j]] + 1
#  }
#}
}
authors2 <- getNodeSet(summaries, "//Item[@Name='AuthorList']")
for(i in seq(1, length(authors)) ) {
#for(k in seq(1, length(authors2)) ) {
#print(getNodeSet(authors2[[k]], "//Item[@Name='AuthorList']")[5])
print( xpathSApply(authors2, "//Item[@Name='Author']", xmlValue ) )
#}
#print(authors2)
#for(j in seq(1, length(authors))) {
#  if( (grep( authors[i], ) != -1) && (i != j) ) {
#    trial.table[authors[i], authors[j]] = trial.table[authors[i], authors[j]] + 1
#  }
#}
}
authors2 <- xpathSApply(summaries, "//Item[@Name='AuthorList']")
for(i in seq(1, length(authors)) ) {
#for(k in seq(1, length(authors2)) ) {
#print(getNodeSet(authors2[[k]], "//Item[@Name='AuthorList']")[5])
print( xpathSApply(authors2, "//Item[@Name='Author']", xmlValue ) )
#}
#print(authors2)
#for(j in seq(1, length(authors))) {
#  if( (grep( authors[i], ) != -1) && (i != j) ) {
#    trial.table[authors[i], authors[j]] = trial.table[authors[i], authors[j]] + 1
#  }
#}
}
fix(authors2)
?comb
library(comb)
?fac
?factorial
for(i in se_len(1,150)) {
print(i)
}
for(i in seq_len(1,150)) {
print(i)
}
?seq_len
for(i in seq_len(500)) {
print(i)
}
?as.numeric
C <- numeric(500)
for(i in seq_len(500)) {
C <- factorial(i)/(24*factorial(i-4))
}
C <- numeric(500)
for(i in seq_len(500)) {
C[i] <- factorial(i)/(24*factorial(i-4))
}
fix(C)
C <- numeric(500)
for(i in seq_len(500)) {
C[i] <- factorial(i)/(24*factorial(i-4))
}
fix(C)
factorial(500)/(24*496)
factorial(500)/(24*496)
factorial(50)/(24*46)
install.packages("combinat", lib="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
?combinat
??combinat
?comb
comb(6,4)
library(combinat)
comb(6,4)
combn(6,4)
combn(6,1)
combn(6,3)
combn(60,3)
dim(combn(60,3))
dim(combn(10,4))
dim(combn(100,4))
#Step 1: define function with desired p.d.f (probability density function)
known.pdf <- function(x) {
return (x/2)
}
x <- c()
for(i in 1:2, by 0.1){
x[i] <- known.pdf(i)
}
#Step2: Generate 100,000 samples from known function with uniform p.d.f.
#The more samples you generate, the more precise answer will be with smoother historam
sample.x = runif(100000,0,1)
accept = c()
#Step 3: Core of Acceptance-Rejection Sampling method
#Constant C = max(x/2)
C <- 1
for(i in 1:length(sample.x)){
U = runif(1, 0, 1)
if(dunif(sample.x[i], 0, 1)*C*U <= known.pdf(sample.x[i])) {
accept[i] = 'Yes'
}
else if(dunif(sample.x[i],0,1)*C*U > known.pdf(sample.x[i])) {
accept[i] = 'No'
}
}
T = data.frame(sample.x, accept = factor(accept, levels= c('Yes','No')))
ans<-hist(T[,1][T$accept=='Yes'], breaks = seq(0,1,0.01), freq = F, main = 'Histogram of X', xlab = 'X')
plot(ans$intensities)
plot(ans$counts)
plot(ans$xname)
barplot(T[,1][T$accept=='Yes'])
ans<-hist(T[,1][T$accept=='Yes'], breaks = seq(0,1,0.01), freq = F, main = 'Histogram of X', xlab = 'X')
ans<-hist(T[,1][T$accept=='Yes'], breaks = seq(0,2,0.01), freq = F, main = 'Histogram of X', xlab = 'X')
ans<-hist(T[,1][T$accept=='Yes'], breaks = seq(0,2,0.01), freq = T, main = 'Histogram of X', xlab = 'X')
#Step2: Generate 100,000 samples from known function with uniform p.d.f.
#The more samples you generate, the more precise answer will be with smoother historam
sample.x = runif(100000,0,2)
accept = c()
#Step 3: Core of Acceptance-Rejection Sampling method
#Constant C = max(x/2)
C <- 1
for(i in 1:length(sample.x)){
U = runif(1, 0, 1)
if(dunif(sample.x[i], 0, 2)*C*U <= known.pdf(sample.x[i])) {
accept[i] = 'Yes'
}
else if(dunif(sample.x[i],0,2)*C*U > known.pdf(sample.x[i])) {
accept[i] = 'No'
}
}
T = data.frame(sample.x, accept = factor(accept, levels= c('Yes','No')))
ans<-hist(T[,1][T$accept=='Yes'], breaks = seq(0,2,0.01), freq = F, main = 'Histogram of X', xlab = 'X')
runif
?runif
sample.x = runif(100000,0,2)
accept = c()
#Step 3: Core of Acceptance-Rejection Sampling method
#Constant C = max(x/2)
C <- 1
for(i in 1:length(sample.x)){
U = runif(1, 0, 2)
if(dunif(sample.x[i], 0, 2)*C*U <= known.pdf(sample.x[i])) {
accept[i] = 'Yes'
}
else if(dunif(sample.x[i],0,2)*C*U > known.pdf(sample.x[i])) {
accept[i] = 'No'
}
}
T = data.frame(sample.x, accept = factor(accept, levels= c('Yes','No')))
ans<-hist(T[,1][T$accept=='Yes'], breaks = seq(0,2,0.01), freq = F, main = 'Histogram of X', xlab = 'X')
#Step2: Generate 100,000 samples from known function with uniform p.d.f.
#The more samples you generate, the more precise answer will be with smoother historam
sample.x = runif(10000,0,2)
accept = c()
#Step 3: Core of Acceptance-Rejection Sampling method
#Constant C = max(x/2)
C <- 1
for(i in 1:length(sample.x)){
U = runif(1, 0, 2)
if(dunif(sample.x[i], 0, 2)*C*U <= known.pdf(sample.x[i])) {
accept[i] = 'Yes'
}
else if(dunif(sample.x[i],0,2)*C*U > known.pdf(sample.x[i])) {
accept[i] = 'No'
}
}
T = data.frame(sample.x, accept = factor(accept, levels= c('Yes','No')))
ans<-hist(T[,1][T$accept=='Yes'], breaks = seq(0,2,0.01), freq = F, main = 'Histogram of X', xlab = 'X')
#Step2: Generate 100,000 samples from known function with uniform p.d.f.
#The more samples you generate, the more precise answer will be with smoother historam
sample.x = runif(1000,0,2)
accept = c()
#Step 3: Core of Acceptance-Rejection Sampling method
#Constant C = max(x/2)
C <- 1
for(i in 1:length(sample.x)){
U = runif(1, 0, 2)
if(dunif(sample.x[i], 0, 2)*C*U <= known.pdf(sample.x[i])) {
accept[i] = 'Yes'
}
else if(dunif(sample.x[i],0,2)*C*U > known.pdf(sample.x[i])) {
accept[i] = 'No'
}
}
T = data.frame(sample.x, accept = factor(accept, levels= c('Yes','No')))
ans<-hist(T[,1][T$accept=='Yes'], breaks = seq(0,2,0.01), freq = F, main = 'Histogram of X', xlab = 'X')
#Step2: Generate 100,000 samples from known function with uniform p.d.f.
#The more samples you generate, the more precise answer will be with smoother historam
sample.x = runif(1000,0,2)
accept = c()
#Step 3: Core of Acceptance-Rejection Sampling method
#Constant C = max(x/2)
C <- 1
for(i in 1:length(sample.x)){
U = runif(1, 0, 2)
#if(dunif(sample.x[i], 0, 2)*C*U <= known.pdf(sample.x[i])) {
if(sample.x[i]*C*U <= known.pdf(sample.x[i])) {
accept[i] = 'Yes'
}
#else if(dunif(sample.x[i],0,2)*C*U > known.pdf(sample.x[i])) {
else if(sample.x[i]*C*U > known.pdf(sample.x[i])) {
accept[i] = 'No'
}
}
T = data.frame(sample.x, accept = factor(accept, levels= c('Yes','No')))
ans<-hist(T[,1][T$accept=='Yes'], breaks = seq(0,2,0.01), freq = F, main = 'Histogram of X', xlab = 'X')
sample.x = runif(100000,0,2)
accept = c()
#Step 3: Core of Acceptance-Rejection Sampling method
#Constant C = max(x/2)
C <- 1
for(i in 1:length(sample.x)){
U = runif(1, 0, 2)
#if(dunif(sample.x[i], 0, 2)*C*U <= known.pdf(sample.x[i])) {
if(sample.x[i]*C*U <= known.pdf(sample.x[i])) {
accept[i] = 'Yes'
}
#else if(dunif(sample.x[i],0,2)*C*U > known.pdf(sample.x[i])) {
else if(sample.x[i]*C*U > known.pdf(sample.x[i])) {
accept[i] = 'No'
}
}
T = data.frame(sample.x, accept = factor(accept, levels= c('Yes','No')))
ans<-hist(T[,1][T$accept=='Yes'], breaks = seq(0,2,0.01), freq = F, main = 'Histogram of X', xlab = 'X')
sample.x = runif(100000,0,2)
accept = c()
#Step 3: Core of Acceptance-Rejection Sampling method
#Constant C = max(x/2)
C <- 1
for(i in 1:length(sample.x)){
U = runif(1, 0, 2)
if(dunif(sample.x[i], 0, 2)*C*U <= known.pdf(sample.x[i])) {
accept[i] = 'Yes'
}
else if(dunif(sample.x[i],0,2)*C*U > known.pdf(sample.x[i])) {
accept[i] = 'No'
}
}
T = data.frame(sample.x, accept = factor(accept, levels= c('Yes','No')))
ans<-hist(T[,1][T$accept=='Yes'], breaks = seq(0,2,0.01), freq = F, main = 'Histogram of X', xlab = 'X')
library(ape) # written by Emmanuel Paradis
library(phytools) # written by Liam Revell
library(geiger) # written by Luke Harmon
library(picante) # Steve Kembel et al.
library(adephylo)  # Thibaut Jombart
data(package="geiger",geospiza) #a small tree that is loaded as an example in geiger
geospiza
tree<-geospiza$geospiza.tree
tree
plot.new() # clear the plotting window
plot(tree,label.offset=0.15,cex=0.6)
microLabel <- character(length(geospiza$dat[,"tarsusL"])) # create an empty matrix the length of the tree
microLabel
names(microLabel) <- geospiza$dat[,"tarsusL"] # add the spceies names
tree$tip.label <- paste(tree$tip.label,"_", geospiza$dat[,"tarsusL"],sep='')
tree$tip.label
plot(tree)
# 2) Add a scale bar with label below
tarsusL <- geospiza$dat[,"tarsusL"]
names(tarsusL) <- rownames(geospiza)
tarsusL # snout vent length
# Add the SVL data
abline(v=40, col="gray") # add a grey separator
segments(35, 1:length(tarsusL), 35 + (tarsusL[tree$tip.label]/10), 1:length(tarsusL))
?abline
plot(c(-2,3), c(-1,5), type = "n", xlab="x", ylab="y", asp = 1)
## the x- and y-axis, and an integer grid
abline(h=0, v=0, col = "gray60")
text(1,0, "abline( h = 0 )", col = "gray60", adj = c(0, -.1))
abline(h = -1:5, v = -2:3, col = "lightgray", lty=3)
abline(a=1, b=2, col = 2)
text(1,3, "abline( 1, 2 )", col=2, adj=c(-.1,-.1))
abline(v=40, col="gray") # add a grey separator
abline(v=40, col="gray") # add a grey separator
plot.new() # clear the plotting window
plot(tree,label.offset=0.15,cex=0.6)
microLabel <- character(length(geospiza$dat[,"tarsusL"])) # create an empty matrix the length of the tree
microLabel
names(microLabel) <- geospiza$dat[,"tarsusL"] # add the spceies names
tree$tip.label <- paste(tree$tip.label,"_", geospiza$dat[,"tarsusL"],sep='')
tree$tip.label
plot(tree)
abline(v=40, col="gray") # add a grey separator
data(package="geiger",geospiza) #a small tree that is loaded as an example in geiger
geospiza
tree<-geospiza$geospiza.tree
tree
plot.new() # clear the plotting window
plot(tree,label.offset=0.15,cex=0.6)
microLabel <- character(length(geospiza$dat[,"tarsusL"])) # create an empty matrix the length of the tree
microLabel
names(microLabel) <- geospiza$dat[,"tarsusL"] # add the spceies names
tree$tip.label <- paste(tree$tip.label,"_", geospiza$dat[,"tarsusL"],sep='')
tree$tip.label
plot(tree)
# 2) Add a scale bar with label below
tarsusL <- geospiza$dat[,"tarsusL"]
names(tarsusL) <- rownames(geospiza)
tarsusL # snout vent length
# Add the SVL data
abline(v=40, col="gray") # add a grey separator
text(c(35, 35+(max(tarsusL)/10)), c(-3,-3), c("0","19 mm"), cex=0.5)
text(43, -6, "tarsusL", cex=0.5)
box(lty = 2)
text(2, 1.5, "This is a node", font = 2)
arrows(3.5, 1.55, 6.1, 2.2, length = 0.1, lwd = 2)
text(0.5, 3.125, "Root", srt = 270)
points(rep(18.5, 4), 1:4, pch = 15:18, cex = 1.5)
plot.new() # clear the plotting window
plot.phylo(tree, font = 1, no.margin = TRUE, plot= FALSE) #set the graphics as if the tree was plotted
rect(1.2, 0.5, 36, 5.4, col = "fusca")
par(new = TRUE) # now that the current graphical device has been freshly opened
plot(tree, font = 1, no.margin = TRUE)
rect(1.2, 0.5, 36, 5.4, col = "fusca 3.270543")
rect(1.2, 0.5, 36, 5.4, col = "fusca_3.270543")
rect(1.2, 0.5, 36, 5.4)
?rect
plot.new() # clear the plotting window
plot.phylo(tree, font = 1, no.margin = TRUE, plot= FALSE) #set the graphics as if the tree was plotted
rect(1.2, 0.5, 36, 5.4)
rect(1.2, 50, 86, 5.4)
rect(1.2, 50, 36, 54)
plot.new() # clear the plotting window
plot.phylo(tree, font = 1, no.margin = TRUE, plot= FALSE) #set the graphics as if the tree was plotted
rect(1.2, 50, 36, 54)
plot.new() # clear the plotting window
plot.phylo(tree, font = 1, no.margin = TRUE, plot= FALSE) #set the graphics as if the tree was plotted
rect(1.2, 50, 36, 5.4)
par(new = TRUE) # now that the current graphical device has been freshly opened
rect(12, 50, 36, 5.4)
par(new = TRUE) # now that the current graphical device has been freshly opened
plot.new() # clear the plotting window
plot.phylo(tree, font = 1, no.margin = TRUE, plot= FALSE) #set the graphics as if the tree was plotted
rect(12, 50, 36, 5.4)
par(new = TRUE) # now that the current graphical device has been freshly opened
plot.new() # clear the plotting window
plot.phylo(tree, font = 1, no.margin = TRUE, plot= FALSE) #set the graphics as if the tree was plotted
plot.new() # clear the plotting window
plot.phylo(tree, font = 1, no.margin = TRUE, plot= FALSE) #set the graphics as if the tree was plotted
rect(12, 50, 36, 5.4)
par(new = TRUE) # now that the current graphical device has been freshly opened
rect(0, 50, 36, 5.4)
rect(0, 50, 6, 5.4)
par(new = TRUE) # now that the current graphical device has been freshly opened
plot.new() # clear the plotting window
plot.phylo(tree, font = 1, no.margin = TRUE, plot= FALSE) #set the graphics as if the tree was plotted
plot.new() # clear the plotting window
plot.phylo(tree, font = 1, no.margin = TRUE, plot= FALSE) #set the graphics as if the tree was plotted
rect(0, 50, 6, 5.4)
par(new = TRUE) # now that the current graphical device has been freshly opened
?rect
plot.new() # clear the plotting window
plot.phylo(tree, font = 1, no.margin = TRUE, plot= FALSE) #set the graphics as if the tree was plotted
rect(0, 50, 6, 54)
par(new = TRUE) # now that the current graphical device has been freshly opened
rect(0, 1, 1, 2)
rect(0, 1, 1, 20)
rect(0, 1, 1, 5)
rect(0, 4, 1, 5)
plot.new() # clear the plotting window
plot.phylo(tree, font = 1, no.margin = TRUE, plot= FALSE) #set the graphics as if the tree was plotted
rect(0, 4, 1, 5)
data(package="geiger",geospiza)
geospiza
plot(geospiza, cex=.5)
data(bird.families)
bird.families
plot(bird.families, cex=.5)
plot(tree, cex=.5)
zoom(tree, 1:15, col = "grey", no.margin = TRUE, font = 1, subtree = TRUE) # zoom into tips 1:15
zoom(tree, 1:15, col = "grey", no.margin = TRUE, font = 1, subtree = F)
plot(tree, cex=.5)
data(package="geiger",geospiza) #a small tree that is loaded as an example in geiger
geospiza
tree<-geospiza$geospiza.tree
tree
plot.new() # clear the plotting window
plot(tree,label.offset=0.15,cex=0.6)
microLabel <- character(length(geospiza$dat[,"tarsusL"])) # create an empty matrix the length of the tree
microLabel
names(microLabel) <- geospiza$dat[,"tarsusL"] # add the spceies names
tree$tip.label <- paste(tree$tip.label,"_", geospiza$dat[,"tarsusL"],sep='')
tree$tip.label
plot(tree)
plot(tree, cex=.5)
zoom(tree, 1:15, col = "grey", no.margin = TRUE, font = 1, subtree = TRUE) # zoom into tips 1:15
zoom(tree, 1:5, col = "grey", no.margin = TRUE, font = 1, subtree = TRUE) # zoom into tips 1:15
zoom(tree, 1:2, col = "grey", no.margin = TRUE, font = 1, subtree = F)
plot(tree, cex=.5)
zoom(tree, 1:5, col = "grey", no.margin = TRUE, font = 1, subtree = TRUE) # zoom into tips 1:15
zoom(tree, 1:2, col = "grey", no.margin = TRUE, font = 1, subtree = F)
zoom(tree, 1:5, col = "grey", no.margin = TRUE, font = 1, subtree = F) # zoom into tips 1:15
library(shiny)
#options(browser='firefox')
setwd("~/Dropbox/DecisivatoR/www")
runApp(getwd(),launch.browser = getOption("shiny.launch.browser", interactive()))
library(shiny)
#options(browser='firefox')
setwd("~/Dropbox/DecisivatoR/www")
runApp(getwd(),launch.browser = getOption("shiny.launch.browser", interactive()))
runApp(getwd(),launch.browser = getOption("shiny.launch.browser", interactive()))
runApp(getwd(),launch.browser = getOption("shiny.launch.browser", interactive()))
library(shiny)
#options(browser='firefox')
setwd("~/Dropbox/DecisivatoR/www")
runApp(getwd(),launch.browser = getOption("shiny.launch.browser", interactive()))
runApp(getwd(),launch.browser = getOption("shiny.launch.browser", interactive()))
library(shiny)
#options(browser='firefox')
setwd("~/Dropbox/DecisivatoR/www")
runApp(getwd(),launch.browser = getOption("shiny.launch.browser", interactive()))
res <- isdecisive(filename="~/Dropbox/DecisivatoR/Testing/SmallTest_Unrooted_10.csv",fflag=T)
fix(res)
